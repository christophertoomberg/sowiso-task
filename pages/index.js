import Head from 'next/head';
import { useEffect, useRef, useState } from 'react';
import styles from '../styles/Home.module.css';

export default function Home() {

  const [calculation, setCalculation] = useState(0);
  const [answer, setAnswer] = useState();
  const [userFeedback, setUserFeedback] = useState();
  const [level, setLevel] = useState(1);
  const [points, setPoints] = useState(0);
  const [previousPoints, setPreviousPoints] = useState(0);
  const inputRef = useRef(null);

  useEffect(() => {
    if (points - previousPoints >= 50) {
      setPreviousPoints(points);
      setLevel(level + 1);
    }

  }, [points]);

  useEffect(() => {
    setCalculation(createCalculation(10 ** level));
  }, [level]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Basic math</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.card}>

        <div className={styles.info}>
          <h3>Points: {points}</h3>
          <h3>Level: {level}</h3>
        </div>

        <div className={styles.calculationLine}>
          <h1 className={styles.calculation}>{calculation[0]}+{calculation[1]}=</h1>
          <input className={styles.answerInput} ref={inputRef} type={'number'} onChange={event => setAnswer(+event.target.value)} onKeyPress={(event) => handleEnter(event)} />
        </div>

        <div className={styles.buttonRow}>
          <button className={styles.answerButton} onClick={handleAnswer}>Answer</button>
          <button className={styles.answerButton} onClick={reset}>Start over</button>
        </div>

        <p className={styles.feedback}>{userFeedback}</p>

      </div>
    </div>
  );


  function handleEnter(event) {
    if (event.key !== 'Enter') return;
    handleAnswer();
  }

  function resetForm() {
    inputRef.current.value = null;
  }

  function reset() {
    setPoints(0);
    setLevel(1);
    setUserFeedback('');
    setPreviousPoints(0);
  }

  function handleAnswer() {

    if (answer === calculation[2] || (answer === undefined && calculation[2] === 0)) {
      setUserFeedback('');
      setPoints(points + 10);
      setAnswer(undefined);
      resetForm();
      setCalculation(createCalculation(10 ** level));

    } else {
      setUserFeedback('Incorrect answer. Try again');
      setPoints(points - 5);
    }
  }

  function createCalculation(limit) {
    let numbers = [];

    const a = Math.floor(Math.random() * limit);
    const b = Math.floor(Math.random() * limit);

    numbers.push(a);
    numbers.push(b);
    numbers.push(a + b);

    return numbers;
  }
}
